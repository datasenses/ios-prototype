// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Datasenses_iOS
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import CommonCrypto
import CoreTelephony
@_exported import Datasenses_iOS
import Foundation
import SQLite3
import Security
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers open class People {
  open var ignoreTime: Swift.Bool
  open func set(properties: Datasenses_iOS.Properties)
  open func set(property: Swift.String, to: any Datasenses_iOS.DatasensesType)
  open func setOnce(properties: Datasenses_iOS.Properties)
  open func unset(properties: [Swift.String])
  open func increment(properties: Datasenses_iOS.Properties)
  open func increment(property: Swift.String, by: Swift.Double)
  open func append(properties: Datasenses_iOS.Properties)
  open func remove(properties: Datasenses_iOS.Properties)
  open func union(properties: Datasenses_iOS.Properties)
  open func trackCharge(amount: Swift.Double, properties: Datasenses_iOS.Properties? = nil)
  open func clearCharges()
  open func deleteUser()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(Datasenses) final public class DatasensesObjCWrapper : ObjectiveC.NSObject {
  @objc(shared) public static var shared: Datasenses_iOS.DatasensesObjCWrapper {
    @objc get
  }
  @objc(initializeWithApiKey:launchOptions:) final public class func initialize(apiKey: Swift.String, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil)
  @objc(initializeWithApiKey:trackAutomaticEvents:flushInterval:optOutTrackingByDefault:launchOptions:firebaseOptionsFileName:) final public class func initialize(apiKey: Swift.String, trackAutomaticEvents: Swift.Bool, flushInterval: Swift.Double, optOutTrackingByDefault: Swift.Bool, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil, firebaseOptionsFileName: Swift.String? = nil)
  @objc final public func updatePostbackConversionValue(_ value: Swift.Int)
  @objc final public func handleUrl(_ app: UIKit.UIApplication, url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any]?) -> Swift.Bool
  @objc final public func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?) -> Swift.Bool
  @objc final public func registerPushNotification(token: Swift.String?, apnToken: Swift.String?)
  @objc final public func flush(completion: (() -> Swift.Void)? = nil)
  @objc final public func reset(completion: (() -> Swift.Void)? = nil)
  @objc(trackEventWithName:properties:) final public func track(event: Swift.String, properties: [Swift.String : Any]?)
  @objc final public var loggingEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
public protocol DatasensesDelegate : AnyObject {
  func datasensesWillFlush(_ datasenses: Datasenses_iOS.DatasensesInstance) -> Swift.Bool
}
public typealias Properties = [Swift.String : Any]
@_hasMissingDesignatedInitializers open class DatasensesInstance : Swift.CustomDebugStringConvertible {
  open var apiKey: Swift.String
  weak open var delegate: (any Datasenses_iOS.DatasensesDelegate)?
  open var distinctId: Swift.String
  open var anonymousId: Swift.String?
  open var userId: Swift.String?
  open var alias: Swift.String?
  open var appInstallationID: Swift.String?
  open var appInstanceID: Swift.String?
  open var facebookInstanceID: Swift.String?
  open var tiktokInstanceID: Swift.String?
  open var isAppReinstall: Swift.String?
  open var trackAutomaticEventsEnabled: Swift.Bool
  open var flushInterval: Swift.Double {
    get
    set
  }
  open var flushOnBackground: Swift.Bool {
    get
    set
  }
  open var flushBatchSize: Swift.Int {
    get
    set
  }
  open var debugDescription: Swift.String {
    get
  }
  open var loggingEnabled: Swift.Bool {
    get
    set
  }
  open var minimumSessionDuration: Swift.UInt64 {
    get
    set
  }
  open var maximumSessionDuration: Swift.UInt64 {
    get
    set
  }
  @objc deinit
}
extension Datasenses_iOS.DatasensesInstance {
  public func identify(distinctId: Swift.String, usePeople: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  public func createAlias(_ alias: Swift.String, distinctId: Swift.String, usePeople: Swift.Bool = true, andIdentify: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  public func reset(completion: (() -> Swift.Void)? = nil)
}
extension Datasenses_iOS.DatasensesInstance {
  public func archive()
}
extension Datasenses_iOS.DatasensesInstance {
  public func flush(performFullFlush: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
}
extension Datasenses_iOS.DatasensesInstance {
  public func track(event: Swift.String, properties: Datasenses_iOS.Properties? = nil)
  public func registerPushNotification(token: Swift.String?, apnToken: Swift.String?)
  public func time(event: Swift.String)
  public func eventElapsedTime(event: Swift.String) -> Swift.Double
  public func clearTimedEvents()
  public func clearTimedEvent(event: Swift.String)
  public func optOutTracking()
  public func optInTracking(distinctId: Swift.String? = nil, properties: Datasenses_iOS.Properties? = nil)
  public func hasOptedOutTracking() -> Swift.Bool
  public func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?) -> Swift.Bool
  @discardableResult
  public func handleUrl(_ app: UIKit.UIApplication, url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any]?) -> Swift.Bool
  public func updatePostbackConversionValue(_ value: Swift.Int)
}
public protocol DatasensesType {
  func isValidNestedTypeAndValue() -> Swift.Bool
  func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Swift.Optional : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Swift.String : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Foundation.NSString : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Foundation.NSNumber : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Swift.Int : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Swift.UInt : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Swift.Double : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Swift.Float : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Swift.Bool : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Foundation.Date : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Foundation.URL : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Foundation.NSNull : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Swift.Array : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Foundation.NSArray : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
extension Swift.Dictionary : Datasenses_iOS.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses_iOS.DatasensesType) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class Datasenses {
  @discardableResult
  final public class func initialize(apiKey: Swift.String, trackAutomaticEvents: Swift.Bool = true, flushInterval: Swift.Double = 60, optOutTrackingByDefault: Swift.Bool = false, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?, firebaseOptionsFileName: Swift.String? = nil) -> Datasenses_iOS.DatasensesInstance
  final public class func shared() -> Datasenses_iOS.DatasensesInstance
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelIdentifier: Swift.String
  @_Concurrency.MainActor(unsafe) public var isSimulator: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isJailbroken: Swift.Bool {
    get
  }
}
extension Foundation.Data {
  public func encryptAES256(key: Foundation.Data, iv: Foundation.Data, options: Swift.Int = kCCOptionPKCS7Padding) -> Foundation.Data?
  public func decryptAES256(key: Foundation.Data, iv: Foundation.Data, options: Swift.Int = kCCOptionPKCS7Padding) -> Foundation.Data?
}
